{"version":3,"sources":["components/Header.js","api/BooksAPI.js","components/ButtonDropDown.js","components/Book.js","components/BookList.js","components/Shelf.js","components/AddButton.js","pages/DisplayPage.js","components/SearchBar.js","pages/SearchPage.js","AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["Header","content","className","headingLevel","headingClass","Heading","defaultProps","api","token","localStorage","Math","random","toString","substr","headers","ButtonDropDown","choices","label","onSelectChoice","currentShelf","choiceName","useState","active","setActive","node","useRef","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","ref","type","id","map","choice","index","onClick","value","currentlyReading","wantToRead","read","none","Book","book","shelfType","setShelfType","currentBook","setCurrentBook","curShelf","setCurShelf","shelf","fetch","method","body","JSON","stringify","then","res","json","update","bookId","data","res2","src","imageLinks","thumbnail","alt","title","currbook","authors","author","BookList","toggleClass","toggleDropDown","Shelf","shelfName","setData","books","length","AddButton","children","DisplayPage","to","SearchBar","placeholder","inputClassName","iconClassName","icon","handleChange","searchValue","onChange","SearchPage","query","setQuery","bookSearch","setTimeout","search","clearTimeout","AppRoutes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b856d11.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ content, className, headingLevel, headingClass }) => {\n  const Heading = headingLevel;\n  return (\n    <div className={className}>\n      <Heading className={headingClass}>{content}</Heading>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  content: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  headingLevel: PropTypes.string.isRequired,\n  headingClass: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  headingClass: 'heading',\n};\n\nexport default Header;\n","const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet { token } = localStorage;\n// eslint-disable-next-line no-multi-assign\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  // eslint-disable-next-line prettier/prettier\n  'Accept': 'application/json',\n  // eslint-disable-next-line prettier/prettier\n  'Authorization': token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      return data.books;\n    });\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { BsFillCaretDownFill } from 'react-icons/bs';\n\nconst ButtonDropDown = ({\n  choices,\n  label,\n  onSelectChoice,\n  // shelf,\n  currentShelf,\n  choiceName,\n}) => {\n  const [active, setActive] = useState(false);\n\n  const node = useRef();\n\n  const handleClick = (e) => {\n    if (node.current && node.current.contains(e.target)) {\n      // inside click\n      setActive(true);\n      return;\n    } // outside click\n    setActive(false);\n  };\n\n  useEffect(() => {\n    // add when mounted\n    document.addEventListener('mousedown', handleClick); // return function to be called when unmounted\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, []);\n  // for initial checkmark (to make checkmark appear on initial render), initialize shelfType to book's currentshelf using api call getAll?\n  return (\n    <div className=\"dropdown\" ref={node}>\n      <button type=\"button\" className=\"btn\">\n        <BsFillCaretDownFill />\n      </button>\n      <div\n        id=\"myDropdown\"\n        className={`dropdown-content ${active ? `show` : `hide`}`}\n      >\n        <div className=\"dropdown-label\">{label}</div>\n        {choices.map((choice, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <div className=\"choice-wrapper\" key={index}>\n            <span className=\"check-mark\">\n              {currentShelf === choice ? '✔' : ''}\n            </span>\n            <button\n              className=\"dropdown-choice\"\n              onClick={() => {\n                // we create an specific callback for each item\n                onSelectChoice(choice); // callback in parent component\n              }}\n              type=\"button\"\n              value={choice}\n            >\n              {choiceName[choice]}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nButtonDropDown.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.string).isRequired,\n  label: PropTypes.string,\n  onSelectChoice: PropTypes.func.isRequired,\n  currentShelf: PropTypes.string.isRequired,\n  choiceName: PropTypes.shape({\n    currentlyReading: PropTypes.string,\n    wantToRead: PropTypes.string,\n    read: PropTypes.string,\n  }),\n};\n\nButtonDropDown.defaultProps = {\n  label: 'Move to...',\n  choiceName: {\n    currentlyReading: 'Currently Reading',\n    wantToRead: 'Want To Read',\n    read: 'Read',\n    none: 'None',\n  },\n};\n\nexport default ButtonDropDown;\n\n// for checkmark next to selected shelf, pull that from API data i.e. from getAll?55, maybe create an object mapping them?\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonDropDown from './ButtonDropDown';\nimport { update, get } from '../api/BooksAPI';\n\nconst Book = ({ book }) => {\n  const choiceName = {\n    currentlyReading: 'Currently Reading',\n    wantToRead: 'Want To Read',\n    read: 'Read',\n    none: 'None',\n  };\n\n  const [shelfType, setShelfType] = useState('None'); // useState is async so state is updated later\n  const [currentBook, setCurrentBook] = useState({});\n  const [curShelf, setCurShelf] = useState('None');\n\n  // useEffect(() => {\n  //   get(book.id).then((res) => {\n  //     console.log(`${res.shelf} ${res.id} ${res.title}`);\n  //     setCurShelf(res.shelf);\n  //   });\n  // }, []); // runs when Book first renders\n\n  const doSomethingWithBookAndShelf = (currbook, currShelf) => {\n    setShelfType(currShelf);\n    setCurrentBook(currbook);\n  };\n\n  useEffect(() => {\n    update(currentBook, shelfType).then(() => {\n      get(book.id).then((res2) => {\n        // console.log(`${res2.shelf} ${res2.id} ${res2.title}`);\n        setCurShelf(res2.shelf);\n      });\n    });\n    // getAll().then((res) => console.log(res));\n    // get(currentBook.id).then((res) => console.log(res.shelf)); // use this to keep checkmark persistent\n    // get(book.id).then((res) => {\n    //   console.log(`${res.shelf} ${res.id} ${res.title}`);\n    //   setCurShelf(res.shelf);\n    // });\n    // console.log(`${shelfType} and ${currentBook.id}`);\n  }, [shelfType]);\n\n  return (\n    <div className=\"book\">\n      <img\n        src={book.imageLinks.thumbnail}\n        alt={book.title}\n        className=\"book-thumbnail\"\n      />\n      <ButtonDropDown\n        choices={['currentlyReading', 'wantToRead', 'read', 'none']}\n        onSelectChoice={(choice) => {\n          // book came from the component props\n          doSomethingWithBookAndShelf(book, choice);\n        }}\n        shelf={shelfType}\n        currentShelf={curShelf}\n        // node={node}\n        choiceName={choiceName}\n      />\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors.map((author, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <div key={index}>{author}</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n// Move to..., currently reading, want to read, read, none\n\nBook.propTypes = {\n  // shelf: PropTypes.string.isRequired,\n  // doSomethingWithBookAndShelf: PropTypes.func.isRequired,\n  book: PropTypes.shape({\n    imageLinks: PropTypes.shape({\n      thumbnail: PropTypes.string.isRequired,\n    }),\n    title: PropTypes.string.isRequired,\n    authors: PropTypes.arrayOf(PropTypes.string),\n    shelf: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Book;\n\n// click on dropdown option, e.target.value would be a shelf (one of [\"wantToRead\", \"currentlyReading\", \"read\"])\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\n\nconst BookList = ({ data, shelf }) => {\n  const toggleClass = (active) => {\n    return active;\n  };\n\n  if (shelf === 'currentlyReading') {\n    return (\n      <div className=\"book-list\">\n        {data !== []\n          ? data.map((book) =>\n              book.shelf === 'currentlyReading' ? (\n                <Book\n                  book={book}\n                  key={book.id}\n                  // doSomethingWithBookAndShelf={doSomethingWithBookAndShelf}\n                  // shelf={shelfType}\n                  toggleDropDown={toggleClass}\n                  // node={node}\n                />\n              ) : (\n                ''\n              )\n            )\n          : 'ok'}\n      </div>\n    );\n  }\n  if (shelf === 'wantToRead') {\n    return (\n      <div className=\"book-list\">\n        {data !== []\n          ? data.map((book) =>\n              book.shelf === 'wantToRead' ? (\n                <Book\n                  book={book}\n                  key={book.id}\n                  // doSomethingWithBookAndShelf={doSomethingWithBookAndShelf}\n                  // shelf={shelfType}\n                  toggleDropDown={toggleClass}\n                  // node={node}\n                />\n              ) : (\n                ''\n              )\n            )\n          : 'ok'}\n      </div>\n    );\n  }\n  if (shelf === 'read') {\n    return (\n      <div className=\"book-list\">\n        {data !== []\n          ? data.map((book) =>\n              book.shelf === 'read' ? (\n                <Book\n                  book={book}\n                  key={book.id}\n                  // doSomethingWithBookAndShelf={doSomethingWithBookAndShelf}\n                  // shelf={shelfType}\n                  toggleDropDown={toggleClass}\n                  // node={node}\n                />\n              ) : (\n                ''\n              )\n            )\n          : 'ok'}\n      </div>\n    );\n  }\n  return (\n    <div className=\"book-list\">\n      {data !== []\n        ? data.map((book) => (\n            <Book\n              book={book}\n              key={book.id}\n              // doSomethingWithBookAndShelf={doSomethingWithBookAndShelf}\n              // shelf={shelfType}\n              toggleDropDown={toggleClass}\n              // node={node}\n            />\n          ))\n        : 'ok'}\n    </div>\n  );\n};\n\nBookList.propTypes = {\n  // shelf: PropTypes.string.isRequired,\n  // doSomethingWithBookAndShelf: PropTypes.func.isRequired,\n  shelf: PropTypes.string,\n  // toggleClass: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      map: PropTypes.func,\n    })\n  ).isRequired,\n};\n\nBookList.defaultProps = {\n  shelf: 'none',\n};\n\nexport default BookList;\n\n/*\nPropTypes.shape({\n    map: PropTypes.func.isRequired,\n  }).isRequired,\nallowAnonLogging: false\n\nauthors: Array [ \"John Haugeland\" ]\n\naverageRating: 4.5\n\ncanonicalVolumeLink: \"https://books.google.com/books/about/Artificial_Intelligence.html?hl=&id=zLFSPdIuqKsC\"\n\ncategories: Array [ \"Computers\" ]\n\ncontentVersion: \"0.0.1.0.preview.1\"\n\ndescription: \"Presented in non-technical terms, this book explores the relationship between human thinking and machine computing\"\n\nid: \"zLFSPdIuqKsC\"\n\nimageLinks: Object { smallThumbnail: \"http://books.google.com/books/content?id=zLFSPdIuqKsC&printsec=frontcover&img=1&zoom=5&edge=curl&source=gbs_api\", thumbnail: \"http://books.google.com/books/content?id=zLFSPdIuqKsC&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api\" }\n\nindustryIdentifiers: Array [ {…}, {…} ]\n\ninfoLink: \"http://books.google.com/books?id=zLFSPdIuqKsC&dq=artificial+intelligence&hl=&source=gbs_api\"\n\nlanguage: \"en\"\n\nmaturityRating: \"NOT_MATURE\"\n\npageCount: 287\n\npreviewLink: \"http://books.google.com/books?id=zLFSPdIuqKsC&printsec=frontcover&dq=artificial+intelligence&hl=&cd=2&source=gbs_api\"\n\nprintType: \"BOOK\"\n\npublishedDate: \"1989-01-01\"\n\npublisher: \"MIT Press\"\nratingsCount: 2\nreadingModes: Object { text: false, image: true }\nsubtitle: \"The Very Idea\"\ntitle: \"Artificial Intelligence\"\n\n\n\nmap: PropTypes.func.isRequired,\n    imageLinks: PropTypes.shape({\n      thumbnail: PropTypes.string.isRequired,\n    }),\n    title: PropTypes.string.isRequired,\n    authors: PropTypes.arrayOf(PropTypes.string),\n    shelf: PropTypes.string,\n    id: PropTypes.string,\n*/\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport { getAll } from '../api/BooksAPI';\nimport BookList from './BookList';\n\nconst Shelf = ({ shelfName }) => {\n  const [data, setData] = useState([]);\n\n  let shelfType = '';\n  if (shelfName === 'Currently Reading') shelfType = 'currentlyReading';\n  else if (shelfName === 'Want To Read') shelfType = 'wantToRead';\n  else if (shelfName === 'Read') shelfType = 'read';\n\n  useEffect(() => {\n    getAll().then((res) => {\n      if (res.length > 0) {\n        // console.log(res);\n        setData(res);\n      } else setData([]);\n    });\n    // getAll().then((res) => console.log(res)); // if res.shelf === currentlyReading\n  });\n\n  return (\n    <>\n      <Header\n        content={shelfName}\n        headingClass=\"shelf-header\"\n        headingLevel=\"h2\"\n      />\n      <hr />\n      <BookList data={data} shelf={shelfType} />\n    </>\n  );\n};\n\nShelf.propTypes = {\n  shelfName: PropTypes.string.isRequired,\n};\n\nexport default Shelf;\n\n// rerender shelf component each time status of book is changed by user.\n// if child component's (Book component's) state changes,\n// parent component (Shelf component) will re-render\n","import React from 'react';\nimport { BsPlus } from 'react-icons/bs';\n\n// eslint-disable-next-line react/prop-types\nconst AddButton = ({ children }) => (\n  <div>\n    <button type=\"button\" className=\"btn addbtn\">\n      <BsPlus />\n      {children}\n    </button>\n  </div>\n);\n\nexport default AddButton;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Shelf from '../components/Shelf';\nimport AddButton from '../components/AddButton';\n\nconst DisplayPage = () => {\n  return (\n    <div>\n      <Header content=\"MyReads\" className=\"App-header\" headingLevel=\"h1\" />\n      <Shelf shelfName=\"Currently Reading\" />\n      <Shelf shelfName=\"Want To Read\" />\n      <Shelf shelfName=\"Read\" />\n\n      <NavLink to=\"/MyReads/search\">\n        <AddButton />\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DisplayPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BsArrowLeftShort } from 'react-icons/bs';\nimport { NavLink } from 'react-router-dom';\n\nconst SearchBar = ({\n  type,\n  placeholder,\n  inputClassName,\n  iconClassName,\n  icon,\n  handleChange,\n  searchValue,\n}) => {\n  return (\n    <div>\n      <NavLink to=\"/MyReads\">\n        <span className={iconClassName}>{icon}</span>\n      </NavLink>\n      <input\n        type={type}\n        value={searchValue}\n        placeholder={placeholder}\n        className={inputClassName}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  type: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string,\n  iconClassName: PropTypes.string,\n  placeholder: PropTypes.string,\n  icon: PropTypes.element,\n  handleChange: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n};\n\nSearchBar.defaultProps = {\n  placeholder: 'Search',\n  inputClassName: 'search-bar',\n  iconClassName: 'input-arrow',\n  icon: <BsArrowLeftShort />,\n};\n\nexport default SearchBar;\n","import React, { useEffect, useState } from 'react';\nimport { BsArrowLeftShort } from 'react-icons/bs';\nimport SearchBar from '../components/SearchBar';\nimport { search } from '../api/BooksAPI';\n// import Book from '../components/Book';\nimport BookList from '../components/BookList';\n\nconst SearchPage = () => {\n  const [query, setQuery] = useState('');\n  const [data, setData] = useState([]);\n\n  // const toggleClass = (active) => {\n  //   return active;\n  // };\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  useEffect(() => {\n    const bookSearch = setTimeout(() => {\n      if (query.length > 0) {\n        search(query).then((res) => {\n          if (res.length > 0) {\n            setData(res);\n          } else setData([]);\n        });\n      } else {\n        setData([]); // make sure data is not undefined\n      }\n    }, 1000);\n    return () => clearTimeout(bookSearch);\n  }, [query]);\n\n  // const [shelfType, setShelfType] = useState('None'); // useState is async so state is updated later\n  // const [currentBook, setCurrentBook] = useState({});\n\n  // const doSomethingWithBookAndShelf = (book, shelf) => {\n  //   setShelfType(shelf);\n  //   setCurrentBook(book);\n  // };\n\n  // useEffect(() => {\n  //   update(currentBook, shelfType).then((res) => console.log(res));\n  //   getAll().then((res) => console.log(res));\n  //   console.log(`${shelfType} ${currentBook.id}`);\n  // }, [shelfType]);\n\n  // const wrapperRef = useRef(null);\n  // useOutsideAlerter(wrapperRef);\n  // const node = useRef();\n\n  // const handleClick = (e) => {\n  //   if (node.current && node.current.contains(e.target)) {\n  //     // inside click\n  //     console.log('inside');\n  //   } // outside click\n  //   else console.log('outside');\n  //   // ... do whatever on click outside here ...\n  // };\n\n  // useEffect(() => {\n  //   // add when mounted\n  //   document.addEventListener('mousedown', handleClick); // return function to be called when unmounted\n  //   return () => {\n  //     document.removeEventListener('mousedown', handleClick);\n  //   };\n  // }, []);\n\n  return (\n    <div>\n      <SearchBar\n        type=\"text\"\n        searchValue={query}\n        placeholder=\"Search for a book\"\n        icon={<BsArrowLeftShort />}\n        handleChange={handleChange}\n      />\n      <BookList data={data} />\n      {/*\n      <div className=\"book-list\">\n        {data !== []\n          ? data.map((book) => (\n              <Book\n                book={book}\n                key={book.id}\n                // doSomethingWithBookAndShelf={doSomethingWithBookAndShelf}\n                // shelf={shelfType}\n                toggleDropDown={toggleClass}\n                // node={node}\n              />\n            ))\n          : 'ok'}\n      </div>\n          */}\n    </div>\n  );\n};\n\nexport default SearchPage;\n\n// wait for data to load so that it becomes defined\n// getting error since data is an object not array???\n// make a book component\n// when adding a book, remember to update global state\n","import React from 'react';\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\n// import { createHashHistory } from 'history';\nimport DisplayPage from './pages/DisplayPage';\nimport SearchPage from './pages/SearchPage';\n\nconst AppRoutes = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/MyReads/\" component={DisplayPage} />\n        <Route path=\"/MyReads/search\" component={SearchPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRoutes;\n","import React from 'react';\nimport './styles/App.css';\nimport AppRoutes from './AppRoutes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRoutes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}