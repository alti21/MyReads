{"version":3,"sources":["components/Header.js","components/ButtonDropDown.js","api/BooksAPI.js","components/Book.js","components/BookList.js","components/Shelf.js","components/AddButton.js","pages/DisplayPage.js","components/SearchBar.js","pages/SearchPage.js","AppRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["Header","content","className","Heading","headingLevel","ButtonDropDown","choices","label","onSelectChoice","currentShelf","choiceName","labelText","useState","active","setActive","node","useRef","handleClick","e","current","contains","target","useEffect","document","addEventListener","removeEventListener","ref","type","aria-label","id","map","choice","index","onClick","defaultProps","currentlyReading","wantToRead","read","none","api","token","localStorage","Math","random","toString","substr","headers","Book","book","reRender","shelfType","setShelfType","currentBook","setCurrentBook","curShelf","setCurShelf","unmounted","shelf","fetch","method","body","JSON","stringify","then","res","json","update","bookId","data","src","undefined","imageLinks","thumbnail","alt","title","currbook","authors","author","BookList","toggleClass","toggleDropDown","Shelf","AddButton","children","DisplayPage","setData","reload","setReload","books","length","to","SearchBar","placeholder","inputClassName","iconClassName","icon","handleChange","searchValue","value","onChange","SearchPage","query","setQuery","bookSearch","setTimeout","search","clearTimeout","AppRoutes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ca5e9562.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ content, className, headingLevel }) => {\n  const Heading = headingLevel;\n  return (\n    <div className={className}>\n      <Heading>{content}</Heading>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  content: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  headingLevel: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { BsFillCaretDownFill } from 'react-icons/bs';\n\nconst ButtonDropDown = ({\n  choices,\n  label,\n  onSelectChoice,\n  currentShelf,\n  choiceName,\n  labelText,\n}) => {\n  const [active, setActive] = useState(false);\n\n  const node = useRef();\n\n  const handleClick = (e) => {\n    if (node.current && node.current.contains(e.target)) {\n      setActive(true);\n      return;\n    }\n    setActive(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClick); // return function to be called when unmounted\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, []);\n\n  return (\n    <div className=\"dropdown\" ref={node}>\n      <button type=\"button\" className=\"btn\" aria-label={labelText}>\n        <BsFillCaretDownFill />\n      </button>\n      <div\n        id=\"myDropdown\"\n        className={`dropdown-content ${active ? `show` : `hide`}`}\n      >\n        <div className=\"dropdown-label\">{label}</div>\n        {choices.map((choice, index) => (\n          <button\n            className=\"dropdown-choice\"\n            // eslint-disable-next-line react/no-array-index-key\n            key={index}\n            type=\"button\"\n            onClick={() => onSelectChoice(choice)}\n          >\n            <span className=\"check-mark\">\n              {currentShelf === choice ? 'âœ”' : ''}\n            </span>\n            {choiceName[choice]}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nButtonDropDown.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.string).isRequired,\n  label: PropTypes.string,\n  onSelectChoice: PropTypes.func.isRequired,\n  currentShelf: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  choiceName: PropTypes.shape({\n    currentlyReading: PropTypes.string,\n    wantToRead: PropTypes.string,\n    read: PropTypes.string,\n  }),\n};\n\nButtonDropDown.defaultProps = {\n  label: 'Move to...',\n  choiceName: {\n    currentlyReading: 'Currently Reading',\n    wantToRead: 'Want To Read',\n    read: 'Read',\n    none: 'None',\n  },\n};\n\nexport default ButtonDropDown;\n","const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet { token } = localStorage;\n// eslint-disable-next-line no-multi-assign\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  // eslint-disable-next-line prettier/prettier\n  'Accept': 'application/json',\n  // eslint-disable-next-line prettier/prettier\n  'Authorization': token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      return data.books;\n    });\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonDropDown from './ButtonDropDown';\nimport { update, get } from '../api/BooksAPI';\n\nconst Book = ({ book, reRender }) => {\n  const choiceName = {\n    currentlyReading: 'Currently Reading',\n    wantToRead: 'Want To Read',\n    read: 'Read',\n    none: 'None',\n  };\n\n  const [shelfType, setShelfType] = useState('None'); // useState is async so state is updated later\n  const [currentBook, setCurrentBook] = useState({});\n  const [curShelf, setCurShelf] = useState('None');\n\n  const updateCurrentBookAndShelf = (currbook, currShelf) => {\n    setShelfType(currShelf);\n    setCurrentBook(currbook);\n  };\n\n  useEffect(() => {\n    let unmounted = false;\n    update(currentBook, shelfType).then(() => {\n      get(book.id).then((res) => {\n        if (!unmounted) {\n          setCurShelf(res.shelf);\n          reRender();\n        }\n      });\n    });\n    return () => {\n      unmounted = true;\n    };\n  }, [shelfType]);\n\n  return (\n    <div className=\"book\">\n      <img\n        src={book.imageLinks !== undefined ? book.imageLinks.thumbnail : null}\n        alt={book.title}\n        className=\"book-thumbnail\"\n      />\n      <ButtonDropDown\n        choices={['currentlyReading', 'wantToRead', 'read', 'none']}\n        onSelectChoice={(choice) => {\n          // book is from the component's props\n          // this function will be passed down to child\n          updateCurrentBookAndShelf(book, choice);\n        }}\n        currentShelf={curShelf}\n        choiceName={choiceName}\n        labelText=\"Choice Dropdown\"\n      />\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors !== undefined\n          ? book.authors.map((author, index) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <div key={index}>{author}</div>\n            ))\n          : null}\n      </div>\n    </div>\n  );\n};\n\nBook.propTypes = {\n  book: PropTypes.shape({\n    imageLinks: PropTypes.shape({\n      thumbnail: PropTypes.string.isRequired,\n    }),\n    title: PropTypes.string.isRequired,\n    authors: PropTypes.arrayOf(PropTypes.string),\n    shelf: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  reRender: PropTypes.func.isRequired,\n};\n\nexport default Book;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\n\nconst BookList = ({ data, shelfType, reRender }) => {\n  const toggleClass = (active) => {\n    return active;\n  };\n  if (shelfType === 'none') {\n    return (\n      <div className=\"book-list\">\n        {data !== []\n          ? data.map((book) => (\n              <Book\n                book={book}\n                key={book.id}\n                toggleDropDown={toggleClass}\n                reRender={() => reRender()}\n              />\n            ))\n          : null}\n      </div>\n    );\n  }\n  return (\n    <div className=\"book-list\">\n      {data !== []\n        ? data.map((book) =>\n            book.shelf === shelfType ? (\n              <Book\n                book={book}\n                key={book.id}\n                toggleDropDown={toggleClass}\n                reRender={() => reRender()}\n              />\n            ) : null\n          )\n        : null}\n    </div>\n  );\n};\n\nBookList.propTypes = {\n  shelfType: PropTypes.string,\n  reRender: PropTypes.func,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      map: PropTypes.func,\n    })\n  ).isRequired,\n};\n\nBookList.defaultProps = {\n  shelfType: 'none',\n  reRender: () => {},\n};\n\nexport default BookList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n// import { getAll } from '../api/BooksAPI';\nimport BookList from './BookList';\n\nconst Shelf = ({ data, shelf, reRender }) => {\n  // const [data, setData] = useState([]);\n\n  // let shelfType = '';\n  // if (shelfName === 'Currently Reading') shelfType = 'currentlyReading';\n  // else if (shelfName === 'Want To Read') shelfType = 'wantToRead';\n  // else if (shelfName === 'Read') shelfType = 'read';\n\n  // put this getAll call in display page???\n  // useEffect(() => {\n  //   let unmounted = false;\n  //   getAll().then((res) => {\n  //     if (!unmounted && res.length > 0) {\n  //       setData(res);\n  //     } else if (!unmounted) setData([]);\n  //   });\n  //   return () => {\n  //     unmounted = true;\n  //   };\n  // }, []);\n\n  return (\n    <>\n      <Header\n        content={shelf.title}\n        className=\"shelf-header\"\n        headingLevel=\"h2\"\n      />\n      <hr />\n      <BookList data={data} shelfType={shelf.id} reRender={() => reRender()} />\n    </>\n  );\n};\n\nShelf.propTypes = {\n  shelf: PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.string,\n  }).isRequired,\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  reRender: PropTypes.func.isRequired,\n};\n\nexport default Shelf;\n","import React from 'react';\nimport { BsPlus } from 'react-icons/bs';\n\n// eslint-disable-next-line react/prop-types\nconst AddButton = ({ children, labelText }) => (\n  <div>\n    <button type=\"button\" className=\"btn addbtn\" aria-label={labelText}>\n      <BsPlus />\n      {children}\n    </button>\n  </div>\n);\n\nexport default AddButton;\n","import React, { useState, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Shelf from '../components/Shelf';\nimport AddButton from '../components/AddButton';\nimport { getAll } from '../api/BooksAPI';\n\nconst DisplayPage = () => {\n  const SHELVES = [\n    {\n      title: 'Currently Reading',\n      id: 'currentlyReading',\n    },\n    {\n      title: 'Want To Read',\n      id: 'wantToRead',\n    },\n    {\n      title: 'Read',\n      id: 'read',\n    },\n  ];\n  const [data, setData] = useState([]);\n  const [reload, setReload] = useState(false);\n\n  const reRender = () => {\n    setReload(!reload);\n  };\n\n  useEffect(() => {\n    let unmounted = false;\n    getAll().then((res) => {\n      if (!unmounted && res.length > 0) {\n        setData(res);\n      } else if (!unmounted) setData([]);\n    });\n    return () => {\n      unmounted = true;\n    };\n  }, [reload]); // this effect should run each time shelf type for a book is updated\n\n  return (\n    <div>\n      <Header content=\"MyReads\" className=\"App-header\" headingLevel=\"h1\" />\n      {SHELVES.map((shelf) => (\n        <Shelf\n          key={shelf.id}\n          data={data}\n          shelf={shelf}\n          reRender={() => reRender()}\n        />\n      ))}\n\n      <NavLink to=\"/MyReads/search\">\n        <AddButton labelText=\"Search\" />\n      </NavLink>\n    </div>\n  );\n};\n\nexport default DisplayPage;\n\n/*\n     <Shelf\n        data={data}\n        shelfName=\"Currently Reading\"\n        reRender={() => reRender()}\n      />\n      <Shelf data={data} shelfName=\"Want To Read\" reRender={() => reRender()} />\n      <Shelf data={data} shelfName=\"Read\" reRender={() => reRender()} />\n*/\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BsArrowLeftShort } from 'react-icons/bs';\nimport { NavLink } from 'react-router-dom';\n\nconst SearchBar = ({\n  type,\n  placeholder,\n  inputClassName,\n  iconClassName,\n  icon,\n  handleChange,\n  searchValue,\n}) => {\n  return (\n    <div>\n      <NavLink to=\"/MyReads\">\n        <span className={iconClassName}>{icon}</span>\n      </NavLink>\n      <input\n        type={type}\n        value={searchValue}\n        placeholder={placeholder}\n        className={inputClassName}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  type: PropTypes.string.isRequired,\n  inputClassName: PropTypes.string,\n  iconClassName: PropTypes.string,\n  placeholder: PropTypes.string,\n  icon: PropTypes.element,\n  handleChange: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n};\n\nSearchBar.defaultProps = {\n  placeholder: 'Search',\n  inputClassName: 'search-bar',\n  iconClassName: 'input-arrow',\n  icon: <BsArrowLeftShort />,\n};\n\nexport default SearchBar;\n","import React, { useEffect, useState } from 'react';\nimport { BsArrowLeftShort } from 'react-icons/bs';\nimport SearchBar from '../components/SearchBar';\nimport { search } from '../api/BooksAPI';\nimport BookList from '../components/BookList';\n\nconst SearchPage = () => {\n  const [query, setQuery] = useState('');\n  const [data, setData] = useState([]);\n\n  const handleChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  useEffect(() => {\n    let unmounted = false;\n    const bookSearch = setTimeout(() => {\n      if (query.length > 0 && !unmounted) {\n        search(query).then((res) => {\n          if (res.length > 0 && !unmounted) {\n            setData(res);\n          } else if (!unmounted) setData([]);\n        });\n      } else if (!unmounted) {\n        setData([]); // make sure data is not undefined\n      }\n    }, 1000);\n    return () => {\n      clearTimeout(bookSearch);\n      unmounted = true;\n    };\n  }, [query]);\n\n  return (\n    <div>\n      <SearchBar\n        type=\"text\"\n        searchValue={query}\n        placeholder=\"Search for a book\"\n        icon={<BsArrowLeftShort />}\n        handleChange={handleChange}\n      />\n      <BookList data={data} shelfType=\"none\" />\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import React from 'react';\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\nimport DisplayPage from './pages/DisplayPage';\nimport SearchPage from './pages/SearchPage';\n\nconst AppRoutes = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/MyReads/\" component={DisplayPage} />\n        <Route path=\"/MyReads/search\" component={SearchPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRoutes;\n","import React from 'react';\nimport './styles/App.css';\nimport AppRoutes from './AppRoutes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppRoutes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}